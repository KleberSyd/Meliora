@page "/petquery"
@using Meliora.Services.Petz.Dto
@using Meliora.Services.Petz
@inject IPetzService PetzService

<PageTitle>Petz Query</PageTitle>

<div class="container mt-5">
    <h2 class="mb-4 text-center">Pet Queries Dashboard</h2>

    <div class="row">
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    Raw SQL Query
                </div>
                <div class="card-body">
                    <h5 class="card-title">Query Code</h5>
                    <pre class="card-text">
SELECT TOP (1000) [Petz].[dbo].[Pets].[id]
      ,[Petz].[dbo].[Pets].[name]
      ,[Petz].[dbo].[Pets].[breed]
      ,[Petz].[dbo].[Pets].[age]
      ,[Petz].[dbo].[Pets].[dead]
FROM [Petz].[dbo].[Pets]
JOIN [Petz].[dbo].[PersonPet] ON [Petz].[dbo].[PersonPet].[pet_id] = [Petz].[dbo].[Pets].[id]
JOIN [Petz].[dbo].[People] ON [Petz].[dbo].[PersonPet].[person_id] = [Petz].[dbo].[People].[id]
WHERE [Petz].[dbo].[Pets].[dead] = 0 and [Petz].[dbo].[People].[age] > 50
ORDER BY [Petz].[dbo].[People].[first_name]
                    </pre>
                    <h5 class="card-title mt-3">Results</h5>
                    @if (_sqlPets is { Count: > 0 })
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Breed</th>
                                        <th>Age</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var pet in _sqlPets)
                                    {
                                        <tr>
                                            <td>@pet.Name</td>
                                            <td>@pet.Breed</td>
                                            <td>@pet.Age</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No results found.</p>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    Linq Query
                </div>
                <div class="card-body">
                    <h5 class="card-title">Query Code</h5>
                    <pre class="card-text">
return await (from pet in context.Pets
            join personPet in context.PersonPets on pet.Id equals personPet.PetId
            join person in context.People on personPet.PersonId equals person.Id
            where !pet.Dead && person.Age > 50
            orderby person.FirstName
            select new PetDto
            {
                Name = pet.Name,
                Breed = pet.Breed,
                Age = pet.Age
            }).ToListAsync();
                    </pre>
                    <h5 class="card-title mt-3">Results</h5>
                    @if (_lambdaPets is { Count: > 0 })
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Breed</th>
                                    <th>Age</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var pet in _lambdaPets)
                                {
                                    <tr>
                                        <td>@pet.Name</td>
                                        <td>@pet.Breed</td>
                                        <td>@pet.Age</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No results found.</p>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="text-center mt-4">
        <button class="btn btn-primary" @onclick="LoadData">Load Data</button>
    </div>
</div>

@code {
    private List<PetDto>? _sqlPets;
    private List<PetDto>? _lambdaPets;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _sqlPets = await PetzService.GetPetsByRawSqlAsync();
        _lambdaPets = await PetzService.GetPetsByLambdaAsync();
        StateHasChanged();
    }
}
