@page "/git-guide"

@inject IJSRuntime JsRuntime

<PageTitle>Git Quick Guide</PageTitle>


<div class="container">
    <section id="create-project">
        <h2>Create a New Project</h2>
        <p>To initialize a new Git repository, use the following command in your terminal:</p>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git init" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git init")'>Copy</button>
        </div>
    </section>

    <section id="start-working">
        <h2>Start Working on a Project</h2>
        <p>To clone an existing repository and start working on it, use:</p>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git clone [repository-url]" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git clone [repository-url]")'>Copy</button>
        </div>
    </section>

    <section id="commit-conventions">
        <h2>Git Commit Message Conventions</h2>
        <p>In our repository, we use and enforce the commit message conventions verified using commitlint with the Angular config. These conventions are crucial for:</p>
        <ul>
            <li>Automatically generating the changelog.</li>
            <li>Simple navigation through git history (e.g., ignoring style changes).</li>
        </ul>

        <h3>Format of the Commit Message:</h3>
        <code>
            &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;<br>
            &lt;BLANK LINE&gt;<br>
            &lt;body&gt;<br>
            &lt;BLANK LINE&gt;<br>
            &lt;footer&gt;
        </code>

        <h4>Example commit message:</h4>
        <p><code>fix(middleware): ensure Range headers adhere more closely to RFC 2616</code></p>
        <p>Add one new dependency, use `range-parser` (Express dependency) to compute range. It is more well-tested in the wild.</p>
        <p>Fixes #2310</p>

        <h3>Allowed &lt;type&gt; Values:</h3>
        <ul>
            <li><code>feat</code> for new features.</li>
            <li><code>fix</code> for bug fixes.</li>
            <li><code>perf</code> for performance improvements.</li>
            <li><code>revert</code> for reverting changes.</li>
            <li><code>docs</code> for documentation changes.</li>
            <li><code>style</code> for changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc).</li>
            <li><code>refactor</code> for code refactoring.</li>
            <li><code>test</code> for adding missing tests or correcting existing tests.</li>
            <li><code>chore</code> for changes to the build process or auxiliary tools and libraries such as documentation generation.</li>
        </ul>

        <h3>Example &lt;scope&gt; Values:</h3>
        <p>init, runner, watcher, config, etc. The &lt;scope&gt; can be empty if the change is global or difficult to assign to a single component.</p>

        <h3>Message Body and Footer:</h3>
        <p>The body should include the motivation for the change and contrast with previous behavior. For referencing issues, use "Closes #issue_number". For breaking changes, clearly mention them in the footer.</p>
    </section>
    
    <section id="git-commands">
        <h2>Git Commands</h2>

        <h3>Add Changes to the Staging Area</h3>
        <p>To add changes to the staging area, use the following command:</p>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git add <file_name>" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git add <file_name>")'>Copy</button>
        </div>

        <h3>Unstage Changes</h3>
        <p>If you want to unstage changes and move them back to the working directory, you can use:</p>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git restore --staged <file_name>" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git restore --staged <file_name>")'>Copy</button>
        </div>

        <h3>Stash Changes</h3>
        <p>If you want to temporarily save your changes without committing them, you can use the stash command:</p>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git stash" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git stash")'>Copy</button>
        </div>
    </section>

    <section id="commit-change">
        <h2>Commit a Change</h2>
        <p>Follow the Karma convention for commit messages. Here are some examples:</p>
        <ul>
            <li><code>feat: Add new login feature</code> - for new features.</li>
            <li><code>fix: Fix bug in image loading</code> - for bug fixes.</li>
            <li><code>style: Improve code formatting, no code change</code> - for styling.</li>
        </ul>
        <p>Commit your changes with a descriptive message:</p>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git commit -m 'feat: Add new login feature'" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git commit -m ")'>Copy</button>
        </div>
    </section>

    <section id="search-history">
        <h2>Search the History for a Change</h2>
        <p>To view the commit history and search for changes, use:</p>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git log" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git log")'>Copy</button>
        </div>
    </section>

    <section id="git-operations">
        <h2>Common Git Operations</h2>

        <h3>Git Merge</h3>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git merge <branch_name>" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git merge <branch_name>")'>Copy</button>
        </div>

        <h3>Git Branch</h3>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git branch <new_branch_name>" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git branch <new_branch_name>")'>Copy</button>
        </div>

        <h3>Git Pull</h3>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git pull" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git pull")'>Copy</button>
        </div>

        <h3>Git Push</h3>
        <div class="input-group mb-3">
            <input type="text" class="form-control" value="git push origin <branch_name>" readonly>
            <button class="btn btn-outline-secondary" @onclick='() => CopyToClipboard("git push origin <branch_name>")'>Copy</button>
        </div>
    </section>

    <section id="official-docs">
        <h2>Further Reading</h2>
        <p>For more detailed information, refer to the <a href="https://git-scm.com/doc" target="_blank">official Git documentation</a>.</p>
    </section>
</div>

@code {
    private async Task CopyToClipboard(string text)
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }
}
