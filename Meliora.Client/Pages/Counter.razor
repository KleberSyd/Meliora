@page "/counter"
@using Meliora.Services
@rendermode InteractiveAuto
@inject IMelioraService MelioraService

<PageTitle>Dynamic Counter</PageTitle>

<h1>Dynamic Counter</h1>
<form>
    <div class="form-group container">
        <div class="row">
            <div class="col">
                <label for="maxNumber">Count up to: </label>
            </div>
            <div class="col">
                <input class="form-control" type="number" id="maxNumber" @bind="_maxNumber" />
            </div>
        </div>
    </div>
    <div class="row">
        <button type="button" class="btn btn-primary" @onclick="StartCountingAsync" disabled="@_isCounting">Start Counting</button>
        <button type="button" class="btn btn-secondary" @onclick="StopCounting" disabled="@(!_isCounting)">Stop Counting</button>
    </div>
</form>

@if (CurrentNumbers.Any())
{
    <div>
        @foreach (var num in CurrentNumbers)
        {
            <li>@num</li>
        }
    </div>
}

@code {
    private int _maxNumber;
    public readonly List<string> CurrentNumbers = [];
    private bool _isCounting;
    private CancellationTokenSource? _cancellationTokenSource;

    private async Task StartCountingAsync()
    {
        _isCounting = true;

        CurrentNumbers.Clear();
        _cancellationTokenSource = new CancellationTokenSource();

        await MelioraService.CountAsync(_maxNumber, number =>
        {
            CurrentNumbers.Add(number);
            InvokeAsync(StateHasChanged);
        }, _cancellationTokenSource.Token);

        _isCounting = false;
    }

    private void StopCounting()
    {
        _cancellationTokenSource?.Cancel();
        _isCounting = false;
    }
}
