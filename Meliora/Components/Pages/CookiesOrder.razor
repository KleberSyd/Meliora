@page "/cookiesorder"
@using Meliora.Domain.Models.CookiesKristen
@using Meliora.Services.CookiesKristen.Interfaces
@using Meliora.Domain.Enum
@attribute [StreamRendering]
@inject IOrderService OrderService

<PageTitle>Cookies Order</PageTitle>

<h1>Orders</h1>

<p>This component demonstrates showing cookie orders.</p>

@if (_orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Order Id</th>
                <th>Name</th>
                <th>Mixins</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in _orders)
            {
                <tr>
                    <td>@order.Id</td>
                    <td>@order.Customer.Name</td>
                    <td>@string.Join(", ", order.Mixins.Select(m => m.Name))</td>
                    <td>@order.Status</td>
                    <td>
                        @if (order.Status != OrderStatus.Completed)
                        {
                            <button type="button" class="btn btn-primary" @onclick="@(async () => await UpdateOrderAsync(order))">Update Status</button>
                        }
                        else
                        {
                            <text>Completed</text>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Order>? _orders;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        _orders = await OrderService.GetOrdersAsync();
    }

    private async Task UpdateOrderAsync(Order order)
    {

        await OrderService.UpdateOrderStatusAsync(order.Id);

        await LoadOrdersAsync();
    }
}
